To run the demo code:

1. Run make to create executable files.
2. Submit jobs for each of executable file:

- To generate paths: The path generation is parallel, each rank will be repsonsible for one pair. There is one for each pair in each job. The file format will be test_testId_pairId e.g test_1_12 means paths for pairID 12 of jobID 1. Each file contains at most k paths (arg6). To put those paths of pairs of a job into 1 file, run the collect.sh script.You may need to change the range of testid in the collet.sh file.

yen_paths.x

qsub -n 32 --mode c8 -t 60 -A Performance --env PAMI_CLIENTS=MPI,OPTIQ ./yen_paths.x 4 4 4 4 2 50 1024 0 90 1

Parameters:
arg1-arg5: size of the partition
arg6: maximum number of paths per pair.
arg7: Demand (in KB). Will be * with 1K in the code. e.g. input is 1024, demand = 1024*1024 = 1M.
arg8-arg9: start id and end id of generated tests.
arg10: numer of ranks per node.


- To select paths based on heuristic1. The heuristic1 chooses paths to minimize the number of paths using any physical links.

heuristic1.x

qsub -n 128 -t 20 -A Performance --env PAMI_CLIENTS=MPI,OPTIQ ./heuristic1.x ../yen_paths 0 90 16 512 1

Parameters:
arg1: folder containing files of paths of pairs of a job/test.
arg2-arg3: min test id, max test id. The heuristic1.x scans the given folder for file in the format of test_testid with testid from min test id to max path id.
arg4: maxload value i.e desired value of maximum number of paths per physical link.
arg5: partition size
arg6: number of ranks per node.

- To select paths based on heuristic2. The heuristic2 selects paths to minimize the actual amount of data passing through a link.

heuristic2.x

qsub -n 32 --mode c4 -t 60 -A Performance --env PAMI_CLIENTS=MPI,OPTIQ ./heuristic2.x ../yen_paths 0 90 512 8192

Parameters:
arg1: a folder containing k paths generated by yen's algorithms.
arg2-arg3: min test id and max test id. heuristic2.x scans the folder to read files test_testId with the testId from min test id to max test id.
arg4:  numer of nodes.
arg5: the unit (chunk size) that is used to split data into paths of a communication pair.

- To generate models to be solved by solvers. Read k paths and generate data files to be read by a solver together with a model file.

opt_model.x

qsub -n 32 --mode c4 -t 20 -A Performance --env PAMI_CLIENTS=MPI,OPTIQ ./opt_model.x ../yen_paths/512 0 90 0 512 1 4 4 4 4 2 2048 2048

Parameters:
arg1: folder contain the k shortest paths.
arg2-arg3: min test id, max test id. The opt_model.x scans the folder to read into file in format test_testID with testID from min test id to max test id.
arg4: maxload value, keep it 0, so all paths are read and used as input for optimization. If want to reduced, can set to a value > 0.
arg5: size of the partition
arg6: number of rank per node.
arg7-arg11: partition size.
arg12: capacity
arg13: demand

- To execute data movement with generated paths.

perf_jobs_
