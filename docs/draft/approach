\section{Approaches}

\subsection{Heuristic approaches}

\subsubsection{Heuristic 1}
In this approach, we search for paths to 

Centric algorithm, run at every node. Need information in advance.

\begin{algorithm}
\textbf{Input:} Set of pairs of source-destination \textit{s$_i$, d$_i$}. Number of nodes \textit{n} \\
\textbf{Output:} Set of paths: one path for a pair of source-destination \\
\\
Init:
    \begin{algorithmic}
	\State queue$<$struct path$>$ \textit{exploring\_paths};
	\State queue$<$struct path$>$ \textit{complete\_paths};
	\For {0 $<=$ {\it i}, \textit{j} $<$ \textit{n}} 
	    \State visisted[{\it i}][{\it j}] = false;
	\EndFor
    \end{algorithmic}
Main:

\begin{algorithmic}
    \Function {Heuristic\_search\_I}{}

    \For {each source \textit{s$_i$}}
	\State check\_and\_add\_new\_path({\it s}$_i$, {\it s}$_i$, null)
    \EndFor

    \While {(\textit{exploring\_path} != empty)}
	\State path \textit{p} = \textit{exploring\_paths}.pop()
	\State get the furthest point {\it u} of {\it p}
	\State check\_and\_add\_new\_path({\it s}$_i$, \textit{u}, {\it p})
    \EndWhile

    \EndFunction
\\
    \Function{check\_and\_add\_new\_path}{bool \textit{visited}[][], int \textit{s$_i$}, int \textit{u}, path {\it op}}
	\For {each neighbor {\it v} of \textit{u}}
	    \If {(!{\it visited}[{\it s$_i$}][{\it v}])}
		\State create an arc \textit{a}$<$\textit{u}, \textit{v}$>$
                \State create a path \textit{np} = {\it op}
	        \State enqueue arc \textit{a} to \textit{np}
	        \State enqueue \textit{np} to \textit{exploring\_paths}
		\If {v is one of the destinations of s$_i$}
		    \State enqueue \textit{np} to \textit{complete\_paths}
                \EndIf
	        \State {\it visited}[s$_i$][v] = true;
	        \State break;
	    \EndIf
	\EndFor
    \EndFunction
\end{algorithmic}

\caption{Heuristic Alg I: Exploring all paths}
\label{alg:h1}

\end{algorithm}

In the \textbf{Algorithm \ref{alg:h1}}, we start by adding 

\subsubsection{Heuristic 2}
